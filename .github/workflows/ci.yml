name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [apps/api, apps/workers]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.directory }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: |
          cd ${{ matrix.directory }}
          poetry install --no-interaction --no-root
      - name: Run Black
        run: |
          cd ${{ matrix.directory }}
          poetry run black --check .
      - name: Run Ruff
        run: |
          cd ${{ matrix.directory }}
          poetry run ruff check .
      - name: Run MyPy
        run: |
          cd ${{ matrix.directory }}
          poetry run mypy .

  test-python:
    name: Test Python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [apps/api, apps/workers]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Install dependencies
        run: |
          cd ${{ matrix.directory }}
          poetry install --no-interaction
      - name: Run tests
        run: |
          cd ${{ matrix.directory }}
          poetry run pytest

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run ESLint
        run: pnpm -r run lint
      - name: Run Prettier Check
        run: pnpm -r run format:check

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run tests
        run: pnpm -r run test

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, dor_loader, or_loader, sunbiz_loader, bcpa_scraper]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service == 'api' && 'api' || 'workers' }}/Dockerfile.${{ matrix.service }}
          push: false
          tags: concordbroker/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'