version: '3.8'

services:
  # Neo4j Database for Graphiti Knowledge Graph
  neo4j:
    image: neo4j:5-enterprise
    container_name: concordbroker-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP/Browser
      - "7687:7687"  # Bolt
    environment:
      # Authentication
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-ConcordBroker2024!}
      
      # Accept license for enterprise features
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      
      # Memory configuration
      NEO4J_server_memory_heap_initial__size: "512M"
      NEO4J_server_memory_heap_max__size: "2G"
      NEO4J_server_memory_pagecache_size: "512M"
      
      # APOC and GDS plugins
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      
      # Security
      NEO4J_server_default__listen__address: "0.0.0.0"
      NEO4J_server_bolt_listen__address: "0.0.0.0:7687"
      NEO4J_server_http_listen__address: "0.0.0.0:7474"
      
      # Performance tuning
      NEO4J_db_query__timeout: "10s"
      NEO4J_db_transaction_timeout: "30s"
      NEO4J_db_lock_acquisition_timeout: "10s"
      
      # Logging
      NEO4J_server_logs_gc_enabled: "true"
      NEO4J_server_logs_query_enabled: "true"
      NEO4J_server_logs_query_threshold: "1s"
      
    volumes:
      # Data persistence
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/import
      - neo4j-plugins:/plugins
      
      # Custom configuration (optional)
      # - ./neo4j/conf:/conf
      
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    networks:
      - concordbroker-network

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: concordbroker-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - concordbroker-network

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: concordbroker-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - concordbroker-network
    depends_on:
      - neo4j

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: concordbroker-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource,redis-app,neo4j-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - concordbroker-network
    depends_on:
      - prometheus
      - neo4j

  # ConcordBroker API with Graphiti
  concordbroker-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: concordbroker-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Neo4j connection
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-ConcordBroker2024!}
      
      # Enable Graphiti
      ENABLE_GRAPHITI: "true"
      
      # Redis connection
      REDIS_URL: redis://redis:6379
      
      # OpenAI for Graphiti
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GRAPHITI_LLM_MODEL: gpt-4o-mini
      GRAPHITI_EMBEDDING_MODEL: text-embedding-3-small
      
      # Supabase connection
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      
      # Other services
      HUGGINGFACE_API_TOKEN: ${HUGGINGFACE_API_TOKEN}
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      
    volumes:
      - ./apps:/app/apps
      - ./logs:/app/logs
    networks:
      - concordbroker-network
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j Browser UI (for development)
  neo4j-browser:
    image: neo4j:5-enterprise
    container_name: concordbroker-neo4j-browser
    profiles:
      - dev
    command: ["neo4j-admin", "server", "console"]
    ports:
      - "7475:7474"
    environment:
      NEO4J_AUTH: none
    networks:
      - concordbroker-network
    depends_on:
      - neo4j

# Networks
networks:
  concordbroker-network:
    driver: bridge
    name: concordbroker-network

# Volumes for data persistence
volumes:
  neo4j-data:
    name: concordbroker-neo4j-data
  neo4j-logs:
    name: concordbroker-neo4j-logs
  neo4j-import:
    name: concordbroker-neo4j-import
  neo4j-plugins:
    name: concordbroker-neo4j-plugins
  redis-data:
    name: concordbroker-redis-data
  prometheus-data:
    name: concordbroker-prometheus-data
  grafana-data:
    name: concordbroker-grafana-data